@page "/orders"
@rendermode InteractiveServer

<div class="d-flex">
    <button @onclick="RefreshOrders" class="btn btn-outline-primary btn-sm my-auto me-1"><i class="bi bi-arrow-clockwise"/></button>
    <h3 class="my-auto">Orders</h3>
</div>
<hr/>
@if (PendingOrdersList.Count == 0 && ProcessedOrdersList.Count == 0 && RejectedOrdersList.Count == 0)
{
    <p>No orders found.</p>
}

@if (PendingOrdersList.Count > 0)
{
    <h2>Pending Orders:</h2>
    @foreach (var order in PendingOrdersList)
    {
        <OrderView OrderId="@order" OnOrderProcessed="RefreshOrders"/>
    }
    <hr/>
}

@if (RejectedOrdersList.Count > 0)
{
    <h2>Rejected Orders:</h2>
    @foreach (var order in RejectedOrdersList)
    {
        <OrderView OrderId="@order" />
    }
    <hr/>
}

@if (ProcessedOrdersList.Count > 0)
{
    <h2>Processed Orders:</h2>
    @foreach (var order in ProcessedOrdersList)
    {
        <OrderView OrderId="@order" />
    }
}

@code {
    [Inject] OrderService OrderService {get; set;}
    private List<string> PendingOrdersList {get; set;} = new();
    private List<string> ProcessedOrdersList {get; set;} = new();
    private List<string> RejectedOrdersList {get; set;} = new();
    
    protected override async Task OnInitializedAsync()
    {
        await RefreshOrders();
    }

    private async Task RefreshOrders()
    {
        (PendingOrdersList, _) = await OrderService.GetPendingOrdersList();
        (ProcessedOrdersList, _) = await OrderService.GetProcessedOrdersList();
        (RejectedOrdersList, _) = await OrderService.GetRejectedOrdersList();

        StateHasChanged();
    }
}
